var search_data = {"index":{"searchIndex":["object","aliquot_sum()","hash_select()","ideal_numbers()","my_one?()","my_reject()","perfect_number?()","proc_count()","proper_factors()","xor_select()"],"longSearchIndex":["object","object#aliquot_sum()","object#hash_select()","object#ideal_numbers()","object#my_one?()","object#my_reject()","object#perfect_number?()","object#proc_count()","object#proper_factors()","object#xor_select()"],"info":[["Object","","Object.html","",""],["aliquot_sum","Object","Object.html#method-i-aliquot_sum","(num)","<p>Return sum of factors up to num.\n"],["hash_select","Object","Object.html#method-i-hash_select","(hash, &prc)","<p>Returns a new Hash, containing key-value pairs that return true when passed  into a block.\n"],["ideal_numbers","Object","Object.html#method-i-ideal_numbers","(n)","<p>Return n numbers where num equals sum of it&#39;s prime nums.\n"],["my_one?","Object","Object.html#method-i-my_one-3F","(arr, &prc)","<p>Custom implementation of Array#one?. Checks if only one ele returns true when passed into a block.\n"],["my_reject","Object","Object.html#method-i-my_reject","(arr, &prc)","<p>Custom implementation of Array#reject. Returns elements that return false when passed into a block.\n"],["perfect_number?","Object","Object.html#method-i-perfect_number-3F","(num)","<p>Check if given number is equal to the sum of it&#39;s prime numbers.\n"],["proc_count","Object","Object.html#method-i-proc_count","(val, procs_arr)","<p>Returns how many times value returned true when passed through an array of procs.\n"],["proper_factors","Object","Object.html#method-i-proper_factors","(num)","<p>Return all factors up to num.\n"],["xor_select","Object","Object.html#method-i-xor_select","(arr, prc1, prc2)","<p>Returns a new Array, containing elements that are exclusive between two procs, ie. when only one of procs â€¦\n"]]}}